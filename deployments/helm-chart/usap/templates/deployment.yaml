apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ricxapp.fullname" . }}
  labels:
    app: {{ include "ricxapp.namespace" . }}-{{ include "ricxapp.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
      keel.sh/policy: force
      keel.sh/trigger: poll      
      keel.sh/match-tag: "true"
      keel.sh/pollSchedule: "@every 5s"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "ricxapp.namespace" . }}-{{ include "ricxapp.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      {{- if .Values.annotations }}
      annotations:
        {{- range $key, $value := .Values.annotations }}
          {{- if kindIs "string" $value }}
        {{ $key }}: {{ $value | toPrettyJson }}
          {{- else }}
        {{ $key }}: |
{{- $value | toPrettyJson | nindent 10 }}
          {{- end }}
        {{- end -}}
      {{ end }}
      labels:
        app: {{ include "ricxapp.namespace" . }}-{{ include "ricxapp.name" . }}
        kubernetes_name: {{ include "ricxapp.namespace" . }}_{{ include "ricxapp.name" . }}
        release: {{ .Release.Name }}
    spec:
      initContainers:
      - name: wait-for-oranasn1encoder
        image: alpine:3.20
        command: ['sh', '-c', 'apk add --no-cache bind-tools && until nslookup service-{{ .Values.oranASN1Coder.name }}.ricxapp; do echo waiting for oranAsn1Encoder server; sleep 2; done']
      hostname: {{ include "ricxapp.name" . }}
      nodeSelector:
        {{- if .Values.nodeSelector }}
        {{ toYaml .Values.nodeSelector | nindent 8 }}
        {{- end }}
      imagePullSecrets:
{{- range .Values.containers }}
        - name: {{ .image.registry | replace "." "-" | replace ":" "-" | replace "/" "-" | trunc 63 | trimSuffix "-" }}
{{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ include "ricxapp.configmapname" . }}-appconfig
        {{- if .Values.controls }}
        {{- if .Values.controls.fileStorage }}
        - name: diskwriter
          hostPath: 
            path: {{ .Values.storage.mountPath }}
            type: DirectoryOrCreate
        {{- end }}
        {{- end }}
      containers:
{{- $containers := .Values.containers }}
{{- $ports := .Values.messaging.ports }}
{{- range $container := $containers }}
  {{- $portlist := list }}
  {{- range $port := $ports }}
    {{- if eq $port.container $container.name }}
        {{- $portlist = append $portlist $port }}
    {{- end }}
  {{- end }}
        - name: {{ $container.name }}
          image: "{{ $container.image.registry }}/{{ $container.image.name }}:{{ $container.image.tag }}"
          {{- if $container.command }}
          command: [
          {{- range $command := $container.command -}}
          {{- $command | quote -}}
          {{- if ne $command (last $container.command) }}
          {{- print ", " -}}
          {{- end -}}
          {{- end -}}
          {{- print "]" -}}
          {{- end}}
          {{- if $container.args }}
          args: [
          {{- range $arg := $container.args -}}
          {{- $arg | quote -}}
          {{- if ne $arg (last $container.args) }}
          {{- print ", " -}}
          {{- end -}}
          {{- end -}}
          {{- print "]" -}}
          {{- end}}
          imagePullPolicy: {{ $.Values.image_pull_policy }}
  {{- if $portlist }}
          ports:
    {{- range $port := $portlist }}
            - name: {{ $port.name }}
              containerPort: {{ $port.port }}
              protocol: TCP
    {{- end }}
  {{- end }}
{{- end }}
          volumeMounts:
            - name: config-volume
              mountPath: {{ .Values.appconfig.path }}
            {{- if .Values.controls }}
            {{- if .Values.controls.fileStorage }}
            - name: diskwriter
              mountPath: {{ .Values.storage.mountPath }}
            {{- end }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "ricxapp.configmapname" . }}-appenv
            - configMapRef:
                name: dbaas-appconfig
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          readinessProbe:
            httpGet:
              path: {{ index .Values "readinessProbe" "httpGet" "path" }}
              port: {{ index .Values "readinessProbe" "httpGet" "port" }}
            initialDelaySeconds: {{ index .Values "readinessProbe" "initialDelaySeconds" }}
            periodSeconds: {{ index .Values "readinessProbe" "periodSeconds" }}
          livenessProbe:
            httpGet:
              path: {{ index .Values "livenessProbe" "httpGet" "path" }}
              port: {{ index .Values "livenessProbe" "httpGet" "port" }}
            initialDelaySeconds: {{ index .Values "livenessProbe" "initialDelaySeconds" }}
            periodSeconds: {{ index .Values "livenessProbe" "periodSeconds" }}
