package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/muriloAvlis/USAP/pkg/pb"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

const srsRanRFDef string

// E2SM-KPM spec: 7.4.1 REPORT Service Style Type (1-5)
func DecodeActFmtTypebyReportStyle(ranFunctionDefinition string, ricReportStyle uint32) []string {
	// create a new gRPC connection
	conn, err := grpc.NewClient("localhost:5051", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("Failed to connect: %s", err.Error())
	}

	defer conn.Close()

	client := pb.NewRanFuncDefDecoderClient(conn)

	// timeout ctx
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	// Request
	request := &pb.MeasListByReportStyleRequest{
		EncodedRanFunctionDefinition: ranFunctionDefinition,
		ReportStyleType:              ricReportStyle,
	}

	// Measure time
	startTime := time.Now()

	// call RPC method
	response, err := client.GetMeasListbyRicReportStyle(ctx, request)
	if err != nil {
		log.Fatalf("Error to call gRPC method: %s", err.Error())
	}

	// Measure time
	duration := time.Since(startTime)

	// Print the time taken
	fmt.Printf("gRPC call took %v\n", duration)

	return response.MeasList
}

func EncodeEventTriggerDefinitionFormat1(reportingPeriod uint64) []int64 {
	// create a new gRPC connection
	conn, err := grpc.NewClient("localhost:5051", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("Failed to connect: %s", err.Error())
	}

	defer conn.Close()

	client := pb.NewEventTriggerFmtEncoderClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	request := &pb.EventTriggerDefFmt1Resquest{
		ReportingPeriod: reportingPeriod,
	}

	// Measure time
	startTime := time.Now()

	// call RPC method
	response, err := client.EncodeEventTriggerFmt1(ctx, request)
	if err != nil {
		log.Fatalf("Error to call gRPC method: %s", err.Error())
	}

	// Measure time
	duration := time.Since(startTime)

	// Print the time taken
	fmt.Printf("gRPC call took %v\n", duration)

	return response.EncodedEventTriggerDefinition
}

func EncodeActionDefinitionFmt4(measNameList []string, granularityPeriod uint64) []int64 {
	// create a new gRPC connection
	conn, err := grpc.NewClient("localhost:5051", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("Failed to connect: %s", err.Error())
	}

	defer conn.Close()

	client := pb.NewActDefEncoderClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	request := &pb.ActDefFmt4Request{
		MeasNameList:      measNameList,
		GranularityPeriod: granularityPeriod,
	}

	// Measure time
	startTime := time.Now()

	// call RPC method
	response, err := client.EncodeActionDefinitionFmt4(ctx, request)
	if err != nil {
		log.Fatalf("Error to call gRPC method: %s", err.Error())
	}

	// Measure time
	duration := time.Since(startTime)

	// Print the time taken
	fmt.Printf("gRPC call took %v\n", duration)

	return response.EncodedActionDefinition
}

func main() {
	// RAN Function Definition Decoder
	measNameList := DecodeActFmtTypebyReportStyle(srsRanRFDef, 4)
	fmt.Println(measNameList)

	// Event Trigger Format Encoder
	reportingPeriod := 10000
	encodedEvTriggerDefFmt1 := EncodeEventTriggerDefinitionFormat1(reportingPeriod)
	fmt.Printf("Event Trigger Definition Format 1 encoded: %v\n", encodedEvTriggerDefFmt1)

	// Action definition format 4 encoder
	// encodedActDefFmt4 := EncodeActionDefinitionFmt4(measNameList, 1000)
	// fmt.Println(encodedActDefFmt4)
}
