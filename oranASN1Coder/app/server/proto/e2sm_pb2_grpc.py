# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import e2sm_pb2 as e2sm__pb2

GRPC_GENERATED_VERSION = '1.66.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in e2sm_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RanFuncDefDecoderStub(object):
    """Service to get meas list
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getMeasListbyRicReportStyle = channel.unary_unary(
            '/e2sm.RanFuncDefDecoder/getMeasListbyRicReportStyle',
            request_serializer=e2sm__pb2.MeasListByReportStyleRequest.SerializeToString,
            response_deserializer=e2sm__pb2.MeasListResponse.FromString,
            _registered_method=True)


class RanFuncDefDecoderServicer(object):
    """Service to get meas list
    """

    def getMeasListbyRicReportStyle(self, request, context):
        """RPC to get meas list by RIC report style
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RanFuncDefDecoderServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'getMeasListbyRicReportStyle': grpc.unary_unary_rpc_method_handler(
            servicer.getMeasListbyRicReportStyle,
            request_deserializer=e2sm__pb2.MeasListByReportStyleRequest.FromString,
            response_serializer=e2sm__pb2.MeasListResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'e2sm.RanFuncDefDecoder', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        'e2sm.RanFuncDefDecoder', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.


class RanFuncDefDecoder(object):
    """Service to get meas list
    """

    @staticmethod
    def getMeasListbyRicReportStyle(request,
                                    target,
                                    options=(),
                                    channel_credentials=None,
                                    call_credentials=None,
                                    insecure=False,
                                    compression=None,
                                    wait_for_ready=None,
                                    timeout=None,
                                    metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/e2sm.RanFuncDefDecoder/getMeasListbyRicReportStyle',
            e2sm__pb2.MeasListByReportStyleRequest.SerializeToString,
            e2sm__pb2.MeasListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ActDefEncoderStub(object):
    """Service to encode action definitions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.encodeActionDefinitionFmt4 = channel.unary_unary(
            '/e2sm.ActDefEncoder/encodeActionDefinitionFmt4',
            request_serializer=e2sm__pb2.ActDefFmt4Request.SerializeToString,
            response_deserializer=e2sm__pb2.EncodedActDefResponse.FromString,
            _registered_method=True)


class ActDefEncoderServicer(object):
    """Service to encode action definitions
    """

    def encodeActionDefinitionFmt4(self, request, context):
        """RPC to encode Action Definition Format 4
        TODO: encode others actions definitions format
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActDefEncoderServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'encodeActionDefinitionFmt4': grpc.unary_unary_rpc_method_handler(
            servicer.encodeActionDefinitionFmt4,
            request_deserializer=e2sm__pb2.ActDefFmt4Request.FromString,
            response_serializer=e2sm__pb2.EncodedActDefResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'e2sm.ActDefEncoder', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        'e2sm.ActDefEncoder', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.


class ActDefEncoder(object):
    """Service to encode action definitions
    """

    @staticmethod
    def encodeActionDefinitionFmt4(request,
                                   target,
                                   options=(),
                                   channel_credentials=None,
                                   call_credentials=None,
                                   insecure=False,
                                   compression=None,
                                   wait_for_ready=None,
                                   timeout=None,
                                   metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/e2sm.ActDefEncoder/encodeActionDefinitionFmt4',
            e2sm__pb2.ActDefFmt4Request.SerializeToString,
            e2sm__pb2.EncodedActDefResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class EventTriggerFmtEncoderStub(object):
    """Service to encode event triggers
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.encodeEventTriggerFmt1 = channel.unary_unary(
            '/e2sm.EventTriggerFmtEncoder/encodeEventTriggerFmt1',
            request_serializer=e2sm__pb2.EventTriggerDefFmt1Resquest.SerializeToString,
            response_deserializer=e2sm__pb2.EncodedEventTriggerDefResponse.FromString,
            _registered_method=True)


class EventTriggerFmtEncoderServicer(object):
    """Service to encode event triggers
    """

    def encodeEventTriggerFmt1(self, request, context):
        """RPC to encode Event Trigger Format 1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventTriggerFmtEncoderServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'encodeEventTriggerFmt1': grpc.unary_unary_rpc_method_handler(
            servicer.encodeEventTriggerFmt1,
            request_deserializer=e2sm__pb2.EventTriggerDefFmt1Resquest.FromString,
            response_serializer=e2sm__pb2.EncodedEventTriggerDefResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'e2sm.EventTriggerFmtEncoder', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        'e2sm.EventTriggerFmtEncoder', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.


class EventTriggerFmtEncoder(object):
    """Service to encode event triggers
    """

    @staticmethod
    def encodeEventTriggerFmt1(request,
                               target,
                               options=(),
                               channel_credentials=None,
                               call_credentials=None,
                               insecure=False,
                               compression=None,
                               wait_for_ready=None,
                               timeout=None,
                               metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/e2sm.EventTriggerFmtEncoder/encodeEventTriggerFmt1',
            e2sm__pb2.EventTriggerDefFmt1Resquest.SerializeToString,
            e2sm__pb2.EncodedEventTriggerDefResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
