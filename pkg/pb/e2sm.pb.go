// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.27.2
// source: e2sm.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncodeEventTriggerRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReportingPeriod int64                  `protobuf:"varint,1,opt,name=reportingPeriod,proto3" json:"reportingPeriod,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EncodeEventTriggerRequest) Reset() {
	*x = EncodeEventTriggerRequest{}
	mi := &file_e2sm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeEventTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeEventTriggerRequest) ProtoMessage() {}

func (x *EncodeEventTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeEventTriggerRequest.ProtoReflect.Descriptor instead.
func (*EncodeEventTriggerRequest) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{0}
}

func (x *EncodeEventTriggerRequest) GetReportingPeriod() int64 {
	if x != nil {
		return x.ReportingPeriod
	}
	return 0
}

type EncodeEventTriggerResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EventTriggerDef []int64                `protobuf:"varint,1,rep,packed,name=eventTriggerDef,proto3" json:"eventTriggerDef,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EncodeEventTriggerResponse) Reset() {
	*x = EncodeEventTriggerResponse{}
	mi := &file_e2sm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeEventTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeEventTriggerResponse) ProtoMessage() {}

func (x *EncodeEventTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeEventTriggerResponse.ProtoReflect.Descriptor instead.
func (*EncodeEventTriggerResponse) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{1}
}

func (x *EncodeEventTriggerResponse) GetEventTriggerDef() []int64 {
	if x != nil {
		return x.EventTriggerDef
	}
	return nil
}

type DecodeRanFunctionRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RanFuncDefinition string                 `protobuf:"bytes,1,opt,name=ranFuncDefinition,proto3" json:"ranFuncDefinition,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DecodeRanFunctionRequest) Reset() {
	*x = DecodeRanFunctionRequest{}
	mi := &file_e2sm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeRanFunctionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeRanFunctionRequest) ProtoMessage() {}

func (x *DecodeRanFunctionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeRanFunctionRequest.ProtoReflect.Descriptor instead.
func (*DecodeRanFunctionRequest) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{2}
}

func (x *DecodeRanFunctionRequest) GetRanFuncDefinition() string {
	if x != nil {
		return x.RanFuncDefinition
	}
	return ""
}

type DecodeRanFunctionResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DecodedRanFuncDef string                 `protobuf:"bytes,1,opt,name=decodedRanFuncDef,proto3" json:"decodedRanFuncDef,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DecodeRanFunctionResponse) Reset() {
	*x = DecodeRanFunctionResponse{}
	mi := &file_e2sm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeRanFunctionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeRanFunctionResponse) ProtoMessage() {}

func (x *DecodeRanFunctionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeRanFunctionResponse.ProtoReflect.Descriptor instead.
func (*DecodeRanFunctionResponse) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{3}
}

func (x *DecodeRanFunctionResponse) GetDecodedRanFuncDef() string {
	if x != nil {
		return x.DecodedRanFuncDef
	}
	return ""
}

type TestCondValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*TestCondValue_ValueInt
	//	*TestCondValue_ValueEnum
	//	*TestCondValue_ValueBool
	//	*TestCondValue_ValueBitS
	//	*TestCondValue_ValueOctS
	//	*TestCondValue_ValuePrtS
	//	*TestCondValue_ValueReal
	Value         isTestCondValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCondValue) Reset() {
	*x = TestCondValue{}
	mi := &file_e2sm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCondValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCondValue) ProtoMessage() {}

func (x *TestCondValue) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCondValue.ProtoReflect.Descriptor instead.
func (*TestCondValue) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{4}
}

func (x *TestCondValue) GetValue() isTestCondValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TestCondValue) GetValueInt() int64 {
	if x != nil {
		if x, ok := x.Value.(*TestCondValue_ValueInt); ok {
			return x.ValueInt
		}
	}
	return 0
}

func (x *TestCondValue) GetValueEnum() int64 {
	if x != nil {
		if x, ok := x.Value.(*TestCondValue_ValueEnum); ok {
			return x.ValueEnum
		}
	}
	return 0
}

func (x *TestCondValue) GetValueBool() bool {
	if x != nil {
		if x, ok := x.Value.(*TestCondValue_ValueBool); ok {
			return x.ValueBool
		}
	}
	return false
}

func (x *TestCondValue) GetValueBitS() []byte {
	if x != nil {
		if x, ok := x.Value.(*TestCondValue_ValueBitS); ok {
			return x.ValueBitS
		}
	}
	return nil
}

func (x *TestCondValue) GetValueOctS() []byte {
	if x != nil {
		if x, ok := x.Value.(*TestCondValue_ValueOctS); ok {
			return x.ValueOctS
		}
	}
	return nil
}

func (x *TestCondValue) GetValuePrtS() string {
	if x != nil {
		if x, ok := x.Value.(*TestCondValue_ValuePrtS); ok {
			return x.ValuePrtS
		}
	}
	return ""
}

func (x *TestCondValue) GetValueReal() float64 {
	if x != nil {
		if x, ok := x.Value.(*TestCondValue_ValueReal); ok {
			return x.ValueReal
		}
	}
	return 0
}

type isTestCondValue_Value interface {
	isTestCondValue_Value()
}

type TestCondValue_ValueInt struct {
	ValueInt int64 `protobuf:"varint,2,opt,name=valueInt,proto3,oneof"`
}

type TestCondValue_ValueEnum struct {
	ValueEnum int64 `protobuf:"varint,3,opt,name=valueEnum,proto3,oneof"`
}

type TestCondValue_ValueBool struct {
	ValueBool bool `protobuf:"varint,4,opt,name=valueBool,proto3,oneof"`
}

type TestCondValue_ValueBitS struct {
	ValueBitS []byte `protobuf:"bytes,5,opt,name=valueBitS,proto3,oneof"`
}

type TestCondValue_ValueOctS struct {
	ValueOctS []byte `protobuf:"bytes,6,opt,name=valueOctS,proto3,oneof"`
}

type TestCondValue_ValuePrtS struct {
	ValuePrtS string `protobuf:"bytes,7,opt,name=valuePrtS,proto3,oneof"`
}

type TestCondValue_ValueReal struct {
	ValueReal float64 `protobuf:"fixed64,8,opt,name=valueReal,proto3,oneof"`
}

func (*TestCondValue_ValueInt) isTestCondValue_Value() {}

func (*TestCondValue_ValueEnum) isTestCondValue_Value() {}

func (*TestCondValue_ValueBool) isTestCondValue_Value() {}

func (*TestCondValue_ValueBitS) isTestCondValue_Value() {}

func (*TestCondValue_ValueOctS) isTestCondValue_Value() {}

func (*TestCondValue_ValuePrtS) isTestCondValue_Value() {}

func (*TestCondValue_ValueReal) isTestCondValue_Value() {}

type TestCondInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestType      string                 `protobuf:"bytes,1,opt,name=testType,proto3" json:"testType,omitempty"`
	TestExpr      string                 `protobuf:"bytes,2,opt,name=testExpr,proto3" json:"testExpr,omitempty"`
	TestCondValue *TestCondValue         `protobuf:"bytes,3,opt,name=testCondValue,proto3" json:"testCondValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCondInfo) Reset() {
	*x = TestCondInfo{}
	mi := &file_e2sm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCondInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCondInfo) ProtoMessage() {}

func (x *TestCondInfo) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCondInfo.ProtoReflect.Descriptor instead.
func (*TestCondInfo) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{5}
}

func (x *TestCondInfo) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *TestCondInfo) GetTestExpr() string {
	if x != nil {
		return x.TestExpr
	}
	return ""
}

func (x *TestCondInfo) GetTestCondValue() *TestCondValue {
	if x != nil {
		return x.TestCondValue
	}
	return nil
}

type MatchingUEConds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestCondInfo  *TestCondInfo          `protobuf:"bytes,1,opt,name=testCondInfo,proto3" json:"testCondInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchingUEConds) Reset() {
	*x = MatchingUEConds{}
	mi := &file_e2sm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchingUEConds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingUEConds) ProtoMessage() {}

func (x *MatchingUEConds) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingUEConds.ProtoReflect.Descriptor instead.
func (*MatchingUEConds) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{6}
}

func (x *MatchingUEConds) GetTestCondInfo() *TestCondInfo {
	if x != nil {
		return x.TestCondInfo
	}
	return nil
}

type EncodeActDefFormat4Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchingUEConds   *MatchingUEConds       `protobuf:"bytes,1,opt,name=matchingUEConds,proto3" json:"matchingUEConds,omitempty"`
	MeasNameList      []string               `protobuf:"bytes,2,rep,name=measNameList,proto3" json:"measNameList,omitempty"`
	GranularityPeriod int64                  `protobuf:"varint,3,opt,name=granularityPeriod,proto3" json:"granularityPeriod,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EncodeActDefFormat4Request) Reset() {
	*x = EncodeActDefFormat4Request{}
	mi := &file_e2sm_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeActDefFormat4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeActDefFormat4Request) ProtoMessage() {}

func (x *EncodeActDefFormat4Request) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeActDefFormat4Request.ProtoReflect.Descriptor instead.
func (*EncodeActDefFormat4Request) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{7}
}

func (x *EncodeActDefFormat4Request) GetMatchingUEConds() *MatchingUEConds {
	if x != nil {
		return x.MatchingUEConds
	}
	return nil
}

func (x *EncodeActDefFormat4Request) GetMeasNameList() []string {
	if x != nil {
		return x.MeasNameList
	}
	return nil
}

func (x *EncodeActDefFormat4Request) GetGranularityPeriod() int64 {
	if x != nil {
		return x.GranularityPeriod
	}
	return 0
}

type EncActDefResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ActionDefinitionEnc []int64                `protobuf:"varint,1,rep,packed,name=actionDefinitionEnc,proto3" json:"actionDefinitionEnc,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EncActDefResponse) Reset() {
	*x = EncActDefResponse{}
	mi := &file_e2sm_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncActDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncActDefResponse) ProtoMessage() {}

func (x *EncActDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncActDefResponse.ProtoReflect.Descriptor instead.
func (*EncActDefResponse) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{8}
}

func (x *EncActDefResponse) GetActionDefinitionEnc() []int64 {
	if x != nil {
		return x.ActionDefinitionEnc
	}
	return nil
}

type DecodeIndMessageRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Timestamp         int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IndicationHeader  []byte                 `protobuf:"bytes,2,opt,name=indicationHeader,proto3" json:"indicationHeader,omitempty"`
	IndicationMessage []byte                 `protobuf:"bytes,3,opt,name=indicationMessage,proto3" json:"indicationMessage,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DecodeIndMessageRequest) Reset() {
	*x = DecodeIndMessageRequest{}
	mi := &file_e2sm_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeIndMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeIndMessageRequest) ProtoMessage() {}

func (x *DecodeIndMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeIndMessageRequest.ProtoReflect.Descriptor instead.
func (*DecodeIndMessageRequest) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{9}
}

func (x *DecodeIndMessageRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DecodeIndMessageRequest) GetIndicationHeader() []byte {
	if x != nil {
		return x.IndicationHeader
	}
	return nil
}

func (x *DecodeIndMessageRequest) GetIndicationMessage() []byte {
	if x != nil {
		return x.IndicationMessage
	}
	return nil
}

type MeasData struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	MeasName string                 `protobuf:"bytes,1,opt,name=measName,proto3" json:"measName,omitempty"`
	// Types that are valid to be assigned to MeasValue:
	//
	//	*MeasData_ValueInt
	//	*MeasData_ValueReal
	//	*MeasData_NoValue
	MeasValue     isMeasData_MeasValue `protobuf_oneof:"measValue"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeasData) Reset() {
	*x = MeasData{}
	mi := &file_e2sm_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeasData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasData) ProtoMessage() {}

func (x *MeasData) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasData.ProtoReflect.Descriptor instead.
func (*MeasData) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{10}
}

func (x *MeasData) GetMeasName() string {
	if x != nil {
		return x.MeasName
	}
	return ""
}

func (x *MeasData) GetMeasValue() isMeasData_MeasValue {
	if x != nil {
		return x.MeasValue
	}
	return nil
}

func (x *MeasData) GetValueInt() int64 {
	if x != nil {
		if x, ok := x.MeasValue.(*MeasData_ValueInt); ok {
			return x.ValueInt
		}
	}
	return 0
}

func (x *MeasData) GetValueReal() float64 {
	if x != nil {
		if x, ok := x.MeasValue.(*MeasData_ValueReal); ok {
			return x.ValueReal
		}
	}
	return 0
}

func (x *MeasData) GetNoValue() bool {
	if x != nil {
		if x, ok := x.MeasValue.(*MeasData_NoValue); ok {
			return x.NoValue
		}
	}
	return false
}

type isMeasData_MeasValue interface {
	isMeasData_MeasValue()
}

type MeasData_ValueInt struct {
	ValueInt int64 `protobuf:"varint,2,opt,name=valueInt,proto3,oneof"`
}

type MeasData_ValueReal struct {
	ValueReal float64 `protobuf:"fixed64,3,opt,name=valueReal,proto3,oneof"`
}

type MeasData_NoValue struct {
	NoValue bool `protobuf:"varint,4,opt,name=noValue,proto3,oneof"`
}

func (*MeasData_ValueInt) isMeasData_MeasValue() {}

func (*MeasData_ValueReal) isMeasData_MeasValue() {}

func (*MeasData_NoValue) isMeasData_MeasValue() {}

type UeMeasData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UEID              int64                  `protobuf:"varint,1,opt,name=UEID,proto3" json:"UEID,omitempty"`
	MeasData          []*MeasData            `protobuf:"bytes,2,rep,name=measData,proto3" json:"measData,omitempty"`
	GranularityPeriod int64                  `protobuf:"varint,3,opt,name=granularityPeriod,proto3" json:"granularityPeriod,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UeMeasData) Reset() {
	*x = UeMeasData{}
	mi := &file_e2sm_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UeMeasData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeMeasData) ProtoMessage() {}

func (x *UeMeasData) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeMeasData.ProtoReflect.Descriptor instead.
func (*UeMeasData) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{11}
}

func (x *UeMeasData) GetUEID() int64 {
	if x != nil {
		return x.UEID
	}
	return 0
}

func (x *UeMeasData) GetMeasData() []*MeasData {
	if x != nil {
		return x.MeasData
	}
	return nil
}

func (x *UeMeasData) GetGranularityPeriod() int64 {
	if x != nil {
		return x.GranularityPeriod
	}
	return 0
}

type DecodeIndMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LatencyMs     int64                  `protobuf:"varint,1,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
	UeMeasData    []*UeMeasData          `protobuf:"bytes,2,rep,name=ueMeasData,proto3" json:"ueMeasData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeIndMessageResponse) Reset() {
	*x = DecodeIndMessageResponse{}
	mi := &file_e2sm_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeIndMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeIndMessageResponse) ProtoMessage() {}

func (x *DecodeIndMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeIndMessageResponse.ProtoReflect.Descriptor instead.
func (*DecodeIndMessageResponse) Descriptor() ([]byte, []int) {
	return file_e2sm_proto_rawDescGZIP(), []int{12}
}

func (x *DecodeIndMessageResponse) GetLatencyMs() int64 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

func (x *DecodeIndMessageResponse) GetUeMeasData() []*UeMeasData {
	if x != nil {
		return x.UeMeasData
	}
	return nil
}

var File_e2sm_proto protoreflect.FileDescriptor

var file_e2sm_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x65, 0x32, 0x73, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x75, 0x73,
	0x61, 0x70, 0x5f, 0x65, 0x32, 0x73, 0x6d, 0x22, 0x45, 0x0a, 0x19, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x46,
	0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x22, 0x48, 0x0a, 0x18, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x49, 0x0a, 0x19, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x44,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x52, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x44, 0x65, 0x66, 0x22, 0xf6, 0x01, 0x0a, 0x0d,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a,
	0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x74, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x74, 0x53, 0x12, 0x1e, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4f, 0x63, 0x74, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x63, 0x74, 0x53, 0x12, 0x1e, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x74, 0x53, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x74, 0x53, 0x12, 0x1e, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3e, 0x0a,
	0x0d, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x73, 0x61, 0x70, 0x5f, 0x65, 0x32, 0x73, 0x6d,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a,
	0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x61, 0x70, 0x5f, 0x65, 0x32,
	0x73, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x01,
	0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x44, 0x65, 0x66, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x73, 0x61, 0x70, 0x5f, 0x65, 0x32, 0x73,
	0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x45, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0x45, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x44, 0x65,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x22, 0x91, 0x01, 0x0a, 0x17,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x6e, 0x6f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x6d, 0x65, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x7f, 0x0a, 0x0a, 0x55, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x45, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x45, 0x49,
	0x44, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x61, 0x70, 0x5f, 0x65, 0x32, 0x73, 0x6d, 0x2e,
	0x4d, 0x65, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x67,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x22, 0x70, 0x0a, 0x18, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x75,
	0x65, 0x4d, 0x65, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x75, 0x73, 0x61, 0x70, 0x5f, 0x65, 0x32, 0x73, 0x6d, 0x2e, 0x55, 0x65, 0x4d, 0x65,
	0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x75, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x32, 0x85, 0x01, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a,
	0x1c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x24, 0x2e,
	0x75, 0x73, 0x61, 0x70, 0x5f, 0x65, 0x32, 0x73, 0x6d, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x75, 0x73, 0x61, 0x70, 0x5f, 0x65, 0x32, 0x73, 0x6d, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x81, 0x01, 0x0a, 0x15, 0x52,
	0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x1b, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61,
	0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x75, 0x73, 0x61, 0x70, 0x5f, 0x65, 0x32, 0x73, 0x6d, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x75, 0x73, 0x61, 0x70, 0x5f,
	0x65, 0x32, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x78,
	0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x1d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x34, 0x12, 0x25, 0x2e, 0x75, 0x73, 0x61, 0x70, 0x5f, 0x65, 0x32, 0x73, 0x6d, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x44, 0x65, 0x66, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x61,
	0x70, 0x5f, 0x65, 0x32, 0x73, 0x6d, 0x2e, 0x45, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x44, 0x65, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x77, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a,
	0x17, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x75, 0x73, 0x61, 0x70, 0x5f,
	0x65, 0x32, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75,
	0x73, 0x61, 0x70, 0x5f, 0x65, 0x32, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_e2sm_proto_rawDescOnce sync.Once
	file_e2sm_proto_rawDescData = file_e2sm_proto_rawDesc
)

func file_e2sm_proto_rawDescGZIP() []byte {
	file_e2sm_proto_rawDescOnce.Do(func() {
		file_e2sm_proto_rawDescData = protoimpl.X.CompressGZIP(file_e2sm_proto_rawDescData)
	})
	return file_e2sm_proto_rawDescData
}

var file_e2sm_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_e2sm_proto_goTypes = []any{
	(*EncodeEventTriggerRequest)(nil),  // 0: usap_e2sm.EncodeEventTriggerRequest
	(*EncodeEventTriggerResponse)(nil), // 1: usap_e2sm.EncodeEventTriggerResponse
	(*DecodeRanFunctionRequest)(nil),   // 2: usap_e2sm.DecodeRanFunctionRequest
	(*DecodeRanFunctionResponse)(nil),  // 3: usap_e2sm.DecodeRanFunctionResponse
	(*TestCondValue)(nil),              // 4: usap_e2sm.TestCondValue
	(*TestCondInfo)(nil),               // 5: usap_e2sm.TestCondInfo
	(*MatchingUEConds)(nil),            // 6: usap_e2sm.MatchingUEConds
	(*EncodeActDefFormat4Request)(nil), // 7: usap_e2sm.EncodeActDefFormat4Request
	(*EncActDefResponse)(nil),          // 8: usap_e2sm.EncActDefResponse
	(*DecodeIndMessageRequest)(nil),    // 9: usap_e2sm.DecodeIndMessageRequest
	(*MeasData)(nil),                   // 10: usap_e2sm.MeasData
	(*UeMeasData)(nil),                 // 11: usap_e2sm.UeMeasData
	(*DecodeIndMessageResponse)(nil),   // 12: usap_e2sm.DecodeIndMessageResponse
}
var file_e2sm_proto_depIdxs = []int32{
	4,  // 0: usap_e2sm.TestCondInfo.testCondValue:type_name -> usap_e2sm.TestCondValue
	5,  // 1: usap_e2sm.MatchingUEConds.testCondInfo:type_name -> usap_e2sm.TestCondInfo
	6,  // 2: usap_e2sm.EncodeActDefFormat4Request.matchingUEConds:type_name -> usap_e2sm.MatchingUEConds
	10, // 3: usap_e2sm.UeMeasData.measData:type_name -> usap_e2sm.MeasData
	11, // 4: usap_e2sm.DecodeIndMessageResponse.ueMeasData:type_name -> usap_e2sm.UeMeasData
	0,  // 5: usap_e2sm.EventTriggerDefinition.EncodeEventTriggerDefFormat1:input_type -> usap_e2sm.EncodeEventTriggerRequest
	2,  // 6: usap_e2sm.RanFunctionDefinition.DecodeRanFunctionDefinition:input_type -> usap_e2sm.DecodeRanFunctionRequest
	7,  // 7: usap_e2sm.ActionDefinition.EncodeActionDefinitionFormat4:input_type -> usap_e2sm.EncodeActDefFormat4Request
	9,  // 8: usap_e2sm.IndicationMessage.decodeIndicationMessage:input_type -> usap_e2sm.DecodeIndMessageRequest
	1,  // 9: usap_e2sm.EventTriggerDefinition.EncodeEventTriggerDefFormat1:output_type -> usap_e2sm.EncodeEventTriggerResponse
	3,  // 10: usap_e2sm.RanFunctionDefinition.DecodeRanFunctionDefinition:output_type -> usap_e2sm.DecodeRanFunctionResponse
	8,  // 11: usap_e2sm.ActionDefinition.EncodeActionDefinitionFormat4:output_type -> usap_e2sm.EncActDefResponse
	12, // 12: usap_e2sm.IndicationMessage.decodeIndicationMessage:output_type -> usap_e2sm.DecodeIndMessageResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_e2sm_proto_init() }
func file_e2sm_proto_init() {
	if File_e2sm_proto != nil {
		return
	}
	file_e2sm_proto_msgTypes[4].OneofWrappers = []any{
		(*TestCondValue_ValueInt)(nil),
		(*TestCondValue_ValueEnum)(nil),
		(*TestCondValue_ValueBool)(nil),
		(*TestCondValue_ValueBitS)(nil),
		(*TestCondValue_ValueOctS)(nil),
		(*TestCondValue_ValuePrtS)(nil),
		(*TestCondValue_ValueReal)(nil),
	}
	file_e2sm_proto_msgTypes[10].OneofWrappers = []any{
		(*MeasData_ValueInt)(nil),
		(*MeasData_ValueReal)(nil),
		(*MeasData_NoValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_e2sm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_e2sm_proto_goTypes,
		DependencyIndexes: file_e2sm_proto_depIdxs,
		MessageInfos:      file_e2sm_proto_msgTypes,
	}.Build()
	File_e2sm_proto = out.File
	file_e2sm_proto_rawDesc = nil
	file_e2sm_proto_goTypes = nil
	file_e2sm_proto_depIdxs = nil
}
