// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: e2sm.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventTriggerDefinition_EncodeEventTriggerDefFormat1_FullMethodName = "/usap_e2sm.EventTriggerDefinition/EncodeEventTriggerDefFormat1"
)

// EventTriggerDefinitionClient is the client API for EventTriggerDefinition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventTriggerDefinitionClient interface {
	EncodeEventTriggerDefFormat1(ctx context.Context, in *EncodeEventTriggerRequest, opts ...grpc.CallOption) (*EncodeEventTriggerResponse, error)
}

type eventTriggerDefinitionClient struct {
	cc grpc.ClientConnInterface
}

func NewEventTriggerDefinitionClient(cc grpc.ClientConnInterface) EventTriggerDefinitionClient {
	return &eventTriggerDefinitionClient{cc}
}

func (c *eventTriggerDefinitionClient) EncodeEventTriggerDefFormat1(ctx context.Context, in *EncodeEventTriggerRequest, opts ...grpc.CallOption) (*EncodeEventTriggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncodeEventTriggerResponse)
	err := c.cc.Invoke(ctx, EventTriggerDefinition_EncodeEventTriggerDefFormat1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventTriggerDefinitionServer is the server API for EventTriggerDefinition service.
// All implementations must embed UnimplementedEventTriggerDefinitionServer
// for forward compatibility.
type EventTriggerDefinitionServer interface {
	EncodeEventTriggerDefFormat1(context.Context, *EncodeEventTriggerRequest) (*EncodeEventTriggerResponse, error)
	mustEmbedUnimplementedEventTriggerDefinitionServer()
}

// UnimplementedEventTriggerDefinitionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventTriggerDefinitionServer struct{}

func (UnimplementedEventTriggerDefinitionServer) EncodeEventTriggerDefFormat1(context.Context, *EncodeEventTriggerRequest) (*EncodeEventTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeEventTriggerDefFormat1 not implemented")
}
func (UnimplementedEventTriggerDefinitionServer) mustEmbedUnimplementedEventTriggerDefinitionServer() {
}
func (UnimplementedEventTriggerDefinitionServer) testEmbeddedByValue() {}

// UnsafeEventTriggerDefinitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventTriggerDefinitionServer will
// result in compilation errors.
type UnsafeEventTriggerDefinitionServer interface {
	mustEmbedUnimplementedEventTriggerDefinitionServer()
}

func RegisterEventTriggerDefinitionServer(s grpc.ServiceRegistrar, srv EventTriggerDefinitionServer) {
	// If the following call pancis, it indicates UnimplementedEventTriggerDefinitionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventTriggerDefinition_ServiceDesc, srv)
}

func _EventTriggerDefinition_EncodeEventTriggerDefFormat1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeEventTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTriggerDefinitionServer).EncodeEventTriggerDefFormat1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTriggerDefinition_EncodeEventTriggerDefFormat1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTriggerDefinitionServer).EncodeEventTriggerDefFormat1(ctx, req.(*EncodeEventTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventTriggerDefinition_ServiceDesc is the grpc.ServiceDesc for EventTriggerDefinition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventTriggerDefinition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usap_e2sm.EventTriggerDefinition",
	HandlerType: (*EventTriggerDefinitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncodeEventTriggerDefFormat1",
			Handler:    _EventTriggerDefinition_EncodeEventTriggerDefFormat1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "e2sm.proto",
}

const (
	RanFunctionDefinition_DecodeRanFunctionDefinition_FullMethodName = "/usap_e2sm.RanFunctionDefinition/DecodeRanFunctionDefinition"
)

// RanFunctionDefinitionClient is the client API for RanFunctionDefinition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RanFunctionDefinitionClient interface {
	DecodeRanFunctionDefinition(ctx context.Context, in *DecodeRanFunctionRequest, opts ...grpc.CallOption) (*DecodeRanFunctionResponse, error)
}

type ranFunctionDefinitionClient struct {
	cc grpc.ClientConnInterface
}

func NewRanFunctionDefinitionClient(cc grpc.ClientConnInterface) RanFunctionDefinitionClient {
	return &ranFunctionDefinitionClient{cc}
}

func (c *ranFunctionDefinitionClient) DecodeRanFunctionDefinition(ctx context.Context, in *DecodeRanFunctionRequest, opts ...grpc.CallOption) (*DecodeRanFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecodeRanFunctionResponse)
	err := c.cc.Invoke(ctx, RanFunctionDefinition_DecodeRanFunctionDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RanFunctionDefinitionServer is the server API for RanFunctionDefinition service.
// All implementations must embed UnimplementedRanFunctionDefinitionServer
// for forward compatibility.
type RanFunctionDefinitionServer interface {
	DecodeRanFunctionDefinition(context.Context, *DecodeRanFunctionRequest) (*DecodeRanFunctionResponse, error)
	mustEmbedUnimplementedRanFunctionDefinitionServer()
}

// UnimplementedRanFunctionDefinitionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRanFunctionDefinitionServer struct{}

func (UnimplementedRanFunctionDefinitionServer) DecodeRanFunctionDefinition(context.Context, *DecodeRanFunctionRequest) (*DecodeRanFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeRanFunctionDefinition not implemented")
}
func (UnimplementedRanFunctionDefinitionServer) mustEmbedUnimplementedRanFunctionDefinitionServer() {}
func (UnimplementedRanFunctionDefinitionServer) testEmbeddedByValue()                               {}

// UnsafeRanFunctionDefinitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RanFunctionDefinitionServer will
// result in compilation errors.
type UnsafeRanFunctionDefinitionServer interface {
	mustEmbedUnimplementedRanFunctionDefinitionServer()
}

func RegisterRanFunctionDefinitionServer(s grpc.ServiceRegistrar, srv RanFunctionDefinitionServer) {
	// If the following call pancis, it indicates UnimplementedRanFunctionDefinitionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RanFunctionDefinition_ServiceDesc, srv)
}

func _RanFunctionDefinition_DecodeRanFunctionDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeRanFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RanFunctionDefinitionServer).DecodeRanFunctionDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RanFunctionDefinition_DecodeRanFunctionDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RanFunctionDefinitionServer).DecodeRanFunctionDefinition(ctx, req.(*DecodeRanFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RanFunctionDefinition_ServiceDesc is the grpc.ServiceDesc for RanFunctionDefinition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RanFunctionDefinition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usap_e2sm.RanFunctionDefinition",
	HandlerType: (*RanFunctionDefinitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecodeRanFunctionDefinition",
			Handler:    _RanFunctionDefinition_DecodeRanFunctionDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "e2sm.proto",
}

const (
	ActionDefinition_EncodeActionDefinitionFormat4_FullMethodName = "/usap_e2sm.ActionDefinition/EncodeActionDefinitionFormat4"
)

// ActionDefinitionClient is the client API for ActionDefinition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionDefinitionClient interface {
	// TODO: implement for others formats
	EncodeActionDefinitionFormat4(ctx context.Context, in *EncodeActDefFormat4Request, opts ...grpc.CallOption) (*EncActDefResponse, error)
}

type actionDefinitionClient struct {
	cc grpc.ClientConnInterface
}

func NewActionDefinitionClient(cc grpc.ClientConnInterface) ActionDefinitionClient {
	return &actionDefinitionClient{cc}
}

func (c *actionDefinitionClient) EncodeActionDefinitionFormat4(ctx context.Context, in *EncodeActDefFormat4Request, opts ...grpc.CallOption) (*EncActDefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncActDefResponse)
	err := c.cc.Invoke(ctx, ActionDefinition_EncodeActionDefinitionFormat4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionDefinitionServer is the server API for ActionDefinition service.
// All implementations must embed UnimplementedActionDefinitionServer
// for forward compatibility.
type ActionDefinitionServer interface {
	// TODO: implement for others formats
	EncodeActionDefinitionFormat4(context.Context, *EncodeActDefFormat4Request) (*EncActDefResponse, error)
	mustEmbedUnimplementedActionDefinitionServer()
}

// UnimplementedActionDefinitionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActionDefinitionServer struct{}

func (UnimplementedActionDefinitionServer) EncodeActionDefinitionFormat4(context.Context, *EncodeActDefFormat4Request) (*EncActDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeActionDefinitionFormat4 not implemented")
}
func (UnimplementedActionDefinitionServer) mustEmbedUnimplementedActionDefinitionServer() {}
func (UnimplementedActionDefinitionServer) testEmbeddedByValue()                          {}

// UnsafeActionDefinitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionDefinitionServer will
// result in compilation errors.
type UnsafeActionDefinitionServer interface {
	mustEmbedUnimplementedActionDefinitionServer()
}

func RegisterActionDefinitionServer(s grpc.ServiceRegistrar, srv ActionDefinitionServer) {
	// If the following call pancis, it indicates UnimplementedActionDefinitionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActionDefinition_ServiceDesc, srv)
}

func _ActionDefinition_EncodeActionDefinitionFormat4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeActDefFormat4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionDefinitionServer).EncodeActionDefinitionFormat4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionDefinition_EncodeActionDefinitionFormat4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionDefinitionServer).EncodeActionDefinitionFormat4(ctx, req.(*EncodeActDefFormat4Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionDefinition_ServiceDesc is the grpc.ServiceDesc for ActionDefinition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionDefinition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usap_e2sm.ActionDefinition",
	HandlerType: (*ActionDefinitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncodeActionDefinitionFormat4",
			Handler:    _ActionDefinition_EncodeActionDefinitionFormat4_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "e2sm.proto",
}
