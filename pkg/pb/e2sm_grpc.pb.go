// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: e2sm.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RanFuncDefDecoder_GetMeasListbyRicReportStyle_FullMethodName = "/e2sm.RanFuncDefDecoder/getMeasListbyRicReportStyle"
)

// RanFuncDefDecoderClient is the client API for RanFuncDefDecoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to get meas list
type RanFuncDefDecoderClient interface {
	// RPC to get meas list by RIC report style
	GetMeasListbyRicReportStyle(ctx context.Context, in *MeasListByReportStyleRequest, opts ...grpc.CallOption) (*MeasListResponse, error)
}

type ranFuncDefDecoderClient struct {
	cc grpc.ClientConnInterface
}

func NewRanFuncDefDecoderClient(cc grpc.ClientConnInterface) RanFuncDefDecoderClient {
	return &ranFuncDefDecoderClient{cc}
}

func (c *ranFuncDefDecoderClient) GetMeasListbyRicReportStyle(ctx context.Context, in *MeasListByReportStyleRequest, opts ...grpc.CallOption) (*MeasListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeasListResponse)
	err := c.cc.Invoke(ctx, RanFuncDefDecoder_GetMeasListbyRicReportStyle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RanFuncDefDecoderServer is the server API for RanFuncDefDecoder service.
// All implementations must embed UnimplementedRanFuncDefDecoderServer
// for forward compatibility
//
// Service to get meas list
type RanFuncDefDecoderServer interface {
	// RPC to get meas list by RIC report style
	GetMeasListbyRicReportStyle(context.Context, *MeasListByReportStyleRequest) (*MeasListResponse, error)
	mustEmbedUnimplementedRanFuncDefDecoderServer()
}

// UnimplementedRanFuncDefDecoderServer must be embedded to have forward compatible implementations.
type UnimplementedRanFuncDefDecoderServer struct {
}

func (UnimplementedRanFuncDefDecoderServer) GetMeasListbyRicReportStyle(context.Context, *MeasListByReportStyleRequest) (*MeasListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasListbyRicReportStyle not implemented")
}
func (UnimplementedRanFuncDefDecoderServer) mustEmbedUnimplementedRanFuncDefDecoderServer() {}

// UnsafeRanFuncDefDecoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RanFuncDefDecoderServer will
// result in compilation errors.
type UnsafeRanFuncDefDecoderServer interface {
	mustEmbedUnimplementedRanFuncDefDecoderServer()
}

func RegisterRanFuncDefDecoderServer(s grpc.ServiceRegistrar, srv RanFuncDefDecoderServer) {
	s.RegisterService(&RanFuncDefDecoder_ServiceDesc, srv)
}

func _RanFuncDefDecoder_GetMeasListbyRicReportStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasListByReportStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RanFuncDefDecoderServer).GetMeasListbyRicReportStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RanFuncDefDecoder_GetMeasListbyRicReportStyle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RanFuncDefDecoderServer).GetMeasListbyRicReportStyle(ctx, req.(*MeasListByReportStyleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RanFuncDefDecoder_ServiceDesc is the grpc.ServiceDesc for RanFuncDefDecoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RanFuncDefDecoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "e2sm.RanFuncDefDecoder",
	HandlerType: (*RanFuncDefDecoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getMeasListbyRicReportStyle",
			Handler:    _RanFuncDefDecoder_GetMeasListbyRicReportStyle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "e2sm.proto",
}

const (
	ActDefEncoder_EncodeActionDefinitionFmt4_FullMethodName = "/e2sm.ActDefEncoder/encodeActionDefinitionFmt4"
)

// ActDefEncoderClient is the client API for ActDefEncoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to encode action definitions
type ActDefEncoderClient interface {
	// RPC to encode Action Definition Format 4
	EncodeActionDefinitionFmt4(ctx context.Context, in *ActDefFmt4Request, opts ...grpc.CallOption) (*EncodedActDefResponse, error)
}

type actDefEncoderClient struct {
	cc grpc.ClientConnInterface
}

func NewActDefEncoderClient(cc grpc.ClientConnInterface) ActDefEncoderClient {
	return &actDefEncoderClient{cc}
}

func (c *actDefEncoderClient) EncodeActionDefinitionFmt4(ctx context.Context, in *ActDefFmt4Request, opts ...grpc.CallOption) (*EncodedActDefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncodedActDefResponse)
	err := c.cc.Invoke(ctx, ActDefEncoder_EncodeActionDefinitionFmt4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActDefEncoderServer is the server API for ActDefEncoder service.
// All implementations must embed UnimplementedActDefEncoderServer
// for forward compatibility
//
// Service to encode action definitions
type ActDefEncoderServer interface {
	// RPC to encode Action Definition Format 4
	EncodeActionDefinitionFmt4(context.Context, *ActDefFmt4Request) (*EncodedActDefResponse, error)
	mustEmbedUnimplementedActDefEncoderServer()
}

// UnimplementedActDefEncoderServer must be embedded to have forward compatible implementations.
type UnimplementedActDefEncoderServer struct {
}

func (UnimplementedActDefEncoderServer) EncodeActionDefinitionFmt4(context.Context, *ActDefFmt4Request) (*EncodedActDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeActionDefinitionFmt4 not implemented")
}
func (UnimplementedActDefEncoderServer) mustEmbedUnimplementedActDefEncoderServer() {}

// UnsafeActDefEncoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActDefEncoderServer will
// result in compilation errors.
type UnsafeActDefEncoderServer interface {
	mustEmbedUnimplementedActDefEncoderServer()
}

func RegisterActDefEncoderServer(s grpc.ServiceRegistrar, srv ActDefEncoderServer) {
	s.RegisterService(&ActDefEncoder_ServiceDesc, srv)
}

func _ActDefEncoder_EncodeActionDefinitionFmt4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActDefFmt4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActDefEncoderServer).EncodeActionDefinitionFmt4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActDefEncoder_EncodeActionDefinitionFmt4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActDefEncoderServer).EncodeActionDefinitionFmt4(ctx, req.(*ActDefFmt4Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ActDefEncoder_ServiceDesc is the grpc.ServiceDesc for ActDefEncoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActDefEncoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "e2sm.ActDefEncoder",
	HandlerType: (*ActDefEncoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "encodeActionDefinitionFmt4",
			Handler:    _ActDefEncoder_EncodeActionDefinitionFmt4_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "e2sm.proto",
}

const (
	EventTriggerFmtEncoder_EncodeEventTriggerFmt1_FullMethodName = "/e2sm.EventTriggerFmtEncoder/encodeEventTriggerFmt1"
)

// EventTriggerFmtEncoderClient is the client API for EventTriggerFmtEncoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to encode event triggers
type EventTriggerFmtEncoderClient interface {
	// RPC to encode Event Trigger Format 1
	EncodeEventTriggerFmt1(ctx context.Context, in *EventTriggerDefFmt1Resquest, opts ...grpc.CallOption) (*EncodedEventTriggerDefResponse, error)
}

type eventTriggerFmtEncoderClient struct {
	cc grpc.ClientConnInterface
}

func NewEventTriggerFmtEncoderClient(cc grpc.ClientConnInterface) EventTriggerFmtEncoderClient {
	return &eventTriggerFmtEncoderClient{cc}
}

func (c *eventTriggerFmtEncoderClient) EncodeEventTriggerFmt1(ctx context.Context, in *EventTriggerDefFmt1Resquest, opts ...grpc.CallOption) (*EncodedEventTriggerDefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncodedEventTriggerDefResponse)
	err := c.cc.Invoke(ctx, EventTriggerFmtEncoder_EncodeEventTriggerFmt1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventTriggerFmtEncoderServer is the server API for EventTriggerFmtEncoder service.
// All implementations must embed UnimplementedEventTriggerFmtEncoderServer
// for forward compatibility
//
// Service to encode event triggers
type EventTriggerFmtEncoderServer interface {
	// RPC to encode Event Trigger Format 1
	EncodeEventTriggerFmt1(context.Context, *EventTriggerDefFmt1Resquest) (*EncodedEventTriggerDefResponse, error)
	mustEmbedUnimplementedEventTriggerFmtEncoderServer()
}

// UnimplementedEventTriggerFmtEncoderServer must be embedded to have forward compatible implementations.
type UnimplementedEventTriggerFmtEncoderServer struct {
}

func (UnimplementedEventTriggerFmtEncoderServer) EncodeEventTriggerFmt1(context.Context, *EventTriggerDefFmt1Resquest) (*EncodedEventTriggerDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeEventTriggerFmt1 not implemented")
}
func (UnimplementedEventTriggerFmtEncoderServer) mustEmbedUnimplementedEventTriggerFmtEncoderServer() {
}

// UnsafeEventTriggerFmtEncoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventTriggerFmtEncoderServer will
// result in compilation errors.
type UnsafeEventTriggerFmtEncoderServer interface {
	mustEmbedUnimplementedEventTriggerFmtEncoderServer()
}

func RegisterEventTriggerFmtEncoderServer(s grpc.ServiceRegistrar, srv EventTriggerFmtEncoderServer) {
	s.RegisterService(&EventTriggerFmtEncoder_ServiceDesc, srv)
}

func _EventTriggerFmtEncoder_EncodeEventTriggerFmt1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTriggerDefFmt1Resquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTriggerFmtEncoderServer).EncodeEventTriggerFmt1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTriggerFmtEncoder_EncodeEventTriggerFmt1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTriggerFmtEncoderServer).EncodeEventTriggerFmt1(ctx, req.(*EventTriggerDefFmt1Resquest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventTriggerFmtEncoder_ServiceDesc is the grpc.ServiceDesc for EventTriggerFmtEncoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventTriggerFmtEncoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "e2sm.EventTriggerFmtEncoder",
	HandlerType: (*EventTriggerFmtEncoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "encodeEventTriggerFmt1",
			Handler:    _EventTriggerFmtEncoder_EncodeEventTriggerFmt1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "e2sm.proto",
}
