// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protobuf/xapp.proto

#include "protobuf/xapp.pb.h"
#include "protobuf/xapp.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace xapp {

static const char* E2SM_KPM_Service_method_names[] = {
  "/xapp.E2SM_KPM_Service/GetIndicationStream",
};

std::unique_ptr< E2SM_KPM_Service::Stub> E2SM_KPM_Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< E2SM_KPM_Service::Stub> stub(new E2SM_KPM_Service::Stub(channel, options));
  return stub;
}

E2SM_KPM_Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetIndicationStream_(E2SM_KPM_Service_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::xapp::KPMIndicationResponse>* E2SM_KPM_Service::Stub::GetIndicationStreamRaw(::grpc::ClientContext* context, const ::xapp::KPMIndicationRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::xapp::KPMIndicationResponse>::Create(channel_.get(), rpcmethod_GetIndicationStream_, context, request);
}

void E2SM_KPM_Service::Stub::async::GetIndicationStream(::grpc::ClientContext* context, const ::xapp::KPMIndicationRequest* request, ::grpc::ClientReadReactor< ::xapp::KPMIndicationResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::xapp::KPMIndicationResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetIndicationStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::xapp::KPMIndicationResponse>* E2SM_KPM_Service::Stub::AsyncGetIndicationStreamRaw(::grpc::ClientContext* context, const ::xapp::KPMIndicationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::xapp::KPMIndicationResponse>::Create(channel_.get(), cq, rpcmethod_GetIndicationStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::xapp::KPMIndicationResponse>* E2SM_KPM_Service::Stub::PrepareAsyncGetIndicationStreamRaw(::grpc::ClientContext* context, const ::xapp::KPMIndicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::xapp::KPMIndicationResponse>::Create(channel_.get(), cq, rpcmethod_GetIndicationStream_, context, request, false, nullptr);
}

E2SM_KPM_Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      E2SM_KPM_Service_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< E2SM_KPM_Service::Service, ::xapp::KPMIndicationRequest, ::xapp::KPMIndicationResponse>(
          [](E2SM_KPM_Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::xapp::KPMIndicationRequest* req,
             ::grpc::ServerWriter<::xapp::KPMIndicationResponse>* writer) {
               return service->GetIndicationStream(ctx, req, writer);
             }, this)));
}

E2SM_KPM_Service::Service::~Service() {
}

::grpc::Status E2SM_KPM_Service::Service::GetIndicationStream(::grpc::ServerContext* context, const ::xapp::KPMIndicationRequest* request, ::grpc::ServerWriter< ::xapp::KPMIndicationResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace xapp

