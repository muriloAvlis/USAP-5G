// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: xapp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	E2SM_KPM_Service_GetIndicationStream_FullMethodName = "/xapp.E2SM_KPM_Service/GetIndicationStream"
)

// E2SM_KPM_ServiceClient is the client API for E2SM_KPM_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type E2SM_KPM_ServiceClient interface {
	GetIndicationStream(ctx context.Context, in *KPMIndicationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KPMIndicationResponse], error)
}

type e2SM_KPM_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewE2SM_KPM_ServiceClient(cc grpc.ClientConnInterface) E2SM_KPM_ServiceClient {
	return &e2SM_KPM_ServiceClient{cc}
}

func (c *e2SM_KPM_ServiceClient) GetIndicationStream(ctx context.Context, in *KPMIndicationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KPMIndicationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &E2SM_KPM_Service_ServiceDesc.Streams[0], E2SM_KPM_Service_GetIndicationStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[KPMIndicationRequest, KPMIndicationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type E2SM_KPM_Service_GetIndicationStreamClient = grpc.ServerStreamingClient[KPMIndicationResponse]

// E2SM_KPM_ServiceServer is the server API for E2SM_KPM_Service service.
// All implementations must embed UnimplementedE2SM_KPM_ServiceServer
// for forward compatibility.
type E2SM_KPM_ServiceServer interface {
	GetIndicationStream(*KPMIndicationRequest, grpc.ServerStreamingServer[KPMIndicationResponse]) error
	mustEmbedUnimplementedE2SM_KPM_ServiceServer()
}

// UnimplementedE2SM_KPM_ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedE2SM_KPM_ServiceServer struct{}

func (UnimplementedE2SM_KPM_ServiceServer) GetIndicationStream(*KPMIndicationRequest, grpc.ServerStreamingServer[KPMIndicationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetIndicationStream not implemented")
}
func (UnimplementedE2SM_KPM_ServiceServer) mustEmbedUnimplementedE2SM_KPM_ServiceServer() {}
func (UnimplementedE2SM_KPM_ServiceServer) testEmbeddedByValue()                          {}

// UnsafeE2SM_KPM_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to E2SM_KPM_ServiceServer will
// result in compilation errors.
type UnsafeE2SM_KPM_ServiceServer interface {
	mustEmbedUnimplementedE2SM_KPM_ServiceServer()
}

func RegisterE2SM_KPM_ServiceServer(s grpc.ServiceRegistrar, srv E2SM_KPM_ServiceServer) {
	// If the following call pancis, it indicates UnimplementedE2SM_KPM_ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&E2SM_KPM_Service_ServiceDesc, srv)
}

func _E2SM_KPM_Service_GetIndicationStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KPMIndicationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(E2SM_KPM_ServiceServer).GetIndicationStream(m, &grpc.GenericServerStream[KPMIndicationRequest, KPMIndicationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type E2SM_KPM_Service_GetIndicationStreamServer = grpc.ServerStreamingServer[KPMIndicationResponse]

// E2SM_KPM_Service_ServiceDesc is the grpc.ServiceDesc for E2SM_KPM_Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var E2SM_KPM_Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xapp.E2SM_KPM_Service",
	HandlerType: (*E2SM_KPM_ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIndicationStream",
			Handler:       _E2SM_KPM_Service_GetIndicationStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xapp.proto",
}
